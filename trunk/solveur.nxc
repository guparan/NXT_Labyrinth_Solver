#define TAILLE_PILE 50
#define TAILLE_X 10
#define TAILLE_Y 10

typedef int nb_routes;

enum Direction {dir_gauche=0, dir_avant=1, dir_droite=2};
enum Coordonnee {coord_x=0, coord_y=1};

struct Case {
       int x;
       int y;
};

bool manager_routes[TAILLE_X][TAILLE_Y][3];
int pile_pivots[TAILLE_PILE][2];
int pile_tete;

/* définition des fonctions */
#include "case.h"
#include "pile.h"
#include "manager.h"

task chercherSortie ()
{

}

task resolution () // se placer dans la 1ere case AVANT
{
     /*
       compter les routes et définir les possibilités
       si nb_routes = 0
           si la pile des pivots est vide -> coincé
           recupérer une case dans la pile des pivots
           calculer la route vers cette case
           dépiler la pile des pivots
       fin si
       si nb_routes > 1
           empiler la case dans la pile des pivots
       fin si

       aller dans la premiere case dispo

     */
}

task main ()
{
     /* Tests */
     int i,j;
     
     manager_initManager();
     pile_initPile();
     
     pile_empiler(1,2);
     pile_empiler(3,4);
     pile_empiler(5,6);

     Case c = pile_top();
     NumOut(0, LCD_LINE1, c.x);
     NumOut(40, LCD_LINE1, c.y);

     manager_setRoute(3, 4, true, false, true);
     if(manager_peutAller(3, 4, dir_gauche)) TextOut(0, LCD_LINE2, "Gauche possible" );
     if(manager_peutAller(3, 4, dir_droite)) TextOut(0, LCD_LINE3, "Droite possible" );
     if(manager_peutAller(3, 4, dir_avant)) TextOut(0, LCD_LINE4, "Avant possible" );
     
     Wait(SEC_10);
}
