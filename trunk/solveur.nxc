/*******************************************************************/

#define POSITION_ROBOT_INITIALE_X 3
#define POSITION_ROBOT_INITIALE_Y 0

#define PUISSANCE_ROTATION 90
#define PUISSANCE_MOTEUR 100
#define DUREE_ROTATION 500

#define TEMPS_FRANCHISSEMENT_CASE SEC_1
#define TEMPS_RETOUR_CENTRE SEC_5

#define ROUGE 60
#define BLANC 65
#define NOIR 45
#define BLEU 47
#define JAUNE 52

#define SORTIE 3518

#define TAILLE_LABYRINTHE_X 10
#define TAILLE_LABYRINTHE_Y 10
#define TAILLE_PILE TAILLE_LABYRINTHE_X*TAILLE_LABYRINTHE_Y

/*******************************************************************/

typedef int nb_routes;

enum Direction {dir_gauche=0, dir_droite=1, dir_haut=2, dir_bas=3};
enum Coordonnee {coord_x=0, coord_y=1};

struct Case {
       int x;
       int y;
};

struct Pivot {
       //Case coord;
       bool possibilites[4];
};

struct Etape {
       Direction dir;
       bool pivot;
};

bool manager_routes[TAILLE_LABYRINTHE_X][TAILLE_LABYRINTHE_Y][4];

Pivot pile_pivots[TAILLE_PILE];
int pile_pivots_tete;

Etape pile_etapes[TAILLE_PILE];
int pile_etapes_tete;


Case robot_position;
int direction_x=0;
int direction_y=1;

/* définition des fonctions */
#include "case.h"
#include "pile.h"
#include "manager.h"

#include "taches.nxc"

/*******************************************************************/

task chercherSortie ()
{

}

task tache_resolution ()
{
     /*
     verifier les cases autour
     si nb_routes = 0
           si la pile des pivots est vide -> coincé
           sinon aller sur le premier pivot de la pile
           recupérer une possibilite dans la pile des pivots
           editer la pile pour mettre cette possibilité à false
           convertir la possibilité absolue en relative
           aller sur cette possibilité
     sinon si nb_routes > 1
           empiler la case dans la pile des pivots avec les directions absolues
           choisir une case parmis les cases libres
     sinon si nb_routes = 1
           aller sur la case libre
     fin si
     */
}

task main ()
{
     /* Tests
     int i,j;
     
     manager_initManager();
     pile_initPile();
     robot_position.x = POSITION_ROBOT_INITIALE_X;
     robot_position.y = POSITION_ROBOT_INITIALE_Y;
     
     pile_empiler(1,2, true, false, true, false);
     pile_empiler(3,4, true, false, true, false);
     pile_empiler(5,6, true, false, true, false);

     Case c = pile_top();
     NumOut(0, LCD_LINE1, c.x);
     NumOut(40, LCD_LINE1, c.y);

     manager_setRoute(3, 4, dir_gauche, false);
     if(manager_peutAller(3, 4, dir_gauche)) TextOut(0, LCD_LINE2, "Gauche possible" );
     if(manager_peutAller(3, 4, dir_droite)) TextOut(0, LCD_LINE3, "Droite possible" );
     if(manager_peutAller(3, 4, dir_haut)) TextOut(0, LCD_LINE4, "Haut possible" );
     
     Wait(SEC_10);
     */
     SetSensorLight(IN_3);
     Precedes(tache_avancer_une_case);
}
