//Solveur de Labyrinth

/*******************************************************************
/!\ LE CENTRE DE PIVOTEMENT N'EST PAS AU CENTRE DU ROBOT
SCHEMA
__________________________________ _ _ _ _ _ _ _ _ _ _ _ _ _ _ ______
   |                       |                                      |
   |                       |                                      |
   |                       |                                      |
   |          _|_  _  _  _ | _ _ _ _ _ _ _ _ _ ____Pos avt rotat° |   19,5cm
   |           |           |                     |                |
   |          _|_    _  _ _|_  ___  pos apres rotat°              |
   |           |           |    |                |                |
   |                       |    | 8,5 cm         |                |
___|___________ ___________|____|___          ___|___          ___|___
La position est la position du centre géométrique du robot
c.a.d le centre d'un rectangle 19,5*13 cm²

Disposition des moteurs :
 A :  gauche
 B :  droite

angle négatif : sens trigo
angle positif : sens anti trigo

taille du robot : 19,5 cm * 13 cm   (longeur * largeur)
centre de pivotement : 8,5cm(distance du)
*******************************************************************/


void avancer(int duree)
{
   OnRevReg(OUT_AB, PUISSANCE_MOTEUR, OUT_REGMODE_SYNC);
   Wait(duree);
}

void reculer(int duree)
{
     OnFwdReg(OUT_AB, PUISSANCE_MOTEUR,OUT_REGMODE_SYNC);
     Wait(duree);
}

void arreter()
{
	Off(OUT_AB);
}

// fait tourner le robot de 90° vers la gauche ou la droite
void tourner(Direction s, int duree)
{
	if(s==dir_gauche)
	{
		if(direction_x==0) // gestion des coordonnees
		{
			direction_x=-direction_y;
			direction_y=0;
		}
		else
		{
			direction_y=direction_x;
			direction_x=0;
		}
		OnRev(OUT_A, PUISSANCE_ROTATION);
		OnFwd(OUT_B, PUISSANCE_ROTATION);
		Wait(duree);
		Off(OUT_AB);
	}
	else if(s==dir_droite)
	{
		if(direction_x==0) // gestion des coordonnees
		{
			direction_x=direction_y;
			direction_y=0;
		}
		else
		{
			direction_y=-direction_x;
			direction_x=0;
		}
		OnRev(OUT_B, PUISSANCE_ROTATION);
		OnFwd(OUT_A, PUISSANCE_ROTATION);
		Wait(duree);
		Off(OUT_AB);
	}
}
/*
int detection_sortie()
{
     int res;
     SetSensorLight(IN_3);
     res=SENSOR_3;
         if(res >= BLEU && res < JAUNE)
         {    res=1;         }
         else
         {    res=0;         }
}

int detection_mur()
{
     int res;
     SetSensorLight(IN_3);
     res=SENSOR_3;
         if(res <= NOIR)
         {    res=1;   }
         else
         {    res=0;         }
     return res;
}

int detection_ligne_blanche()
{
     int res;
     SetSensorLight(IN_3);
     res=SENSOR_3;
         if(res >= BLANC)
         {    res=1;        }
         else
         {    res=0;        }
     return res;
}

int possibilite_gauche()
{
      int left;
      tourner(dir_gauche,DUREE_ROTATION); //on regarde a gauche
           if(detection_ligne_blanche()==1)
               left=1;
           else if(detection_sortie()==1)
               left=SORTIE;
           else
               left=0;
      tourner(dir_droite,DUREE_ROTATION);//on revien en position initial
      return left;
}

int possibilite_droite()
{
     int right;
     tourner(dir_droite,DUREE_ROTATION); //on regarde a droite
           if(detection_ligne_blanche()==1)
               right=1;

           else if(detection_sortie()==1)
                right=SORTIE;
           else
               right=0;
     tourner(dir_gauche,DUREE_ROTATION);//on revient en position initial
     return right;
}

int possibilite_tt_droit()
{
    int fwd;
        if(detection_ligne_blanche()==1)
           fwd=1;
        else
            fwd=0;
}
*/
//UTILE POUR LE CALIBRAGE
void test_lum()
{
     int lum;   //couleur
     string strlum; // string de la couleur
     string couleur;
     string message1,message2 ;
      SetSensorLight(IN_3);
          do
          {
               lum=Sensor(IN_3);
              if(lum>=BLANC) couleur="blanc";
               else if(lum>=ROUGE && lum<BLANC) couleur="rouge";
              else if(lum>=JAUNE && lum <ROUGE) couleur="jaune";
              else if(lum>=BLEU && lum<JAUNE) couleur="bleu";
              else if(lum<BLEU) couleur="noir";
              else couleur="unknow";
              strlum=NumToStr(lum)  ;
              message1=StrCat("valeur :", strlum);
              message2=StrCat("couleur :", couleur);
              TextOut(5, LCD_LINE3, message1);
              TextOut(5, LCD_LINE4, message2);
              Wait(100); // 10 mesures par seconde
           } while(true);
}


void tests()
{
    // test_lum();
      // avancer(SEC_2);
    // OnRevReg(OUT_AB,PUISSANCE_MOTEUR,OUT_REGMODE_SYNC);
     /*avancer(1500);*/
    // while(detection_ligne_blanche()==0)
     //{
        //avancer(SEC_2);
       // Wait(SEC_2);
    // }
     //tourner(gauche,DUREE_ROTATION);
    // Wait(SEC_2);
    // tourner(droite,1030);
    // detection_ligne_blanche();

    tourner(dir_gauche,DUREE_ROTATION) ;
    Wait(SEC_2);
    tourner(dir_droite,DUREE_ROTATION);
    Wait(SEC_2);
    tourner(dir_droite,DUREE_ROTATION);
    Wait(SEC_2);
    tourner(dir_gauche,DUREE_ROTATION);
    Wait(SEC_2);
    
     // avancer();Wait(duree_fw);Off(OUT_AB);Wait(SEC_2);
      //reculer(duree_fw);


}

