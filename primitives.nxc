//Solveur de Labyrinth


//Disposition des moteurs :
// A :  gauche
// B :  droite

// angle négatif : sens trigo
// angle positif : sens anti trigo

// sens de rotation
enum sens{droite, gauche};

char speed_movement_rot = 50; //à regler
char speed_movement_back = 20;  //à regler
char speed_movement = 50;  //à regler
char duree_fw = 1500;  // à regler
char duree_rot = 500;  // à regler

char light_white = 45;  // à regler


//fait avancer le robot d'une certaine distance
void avancer(int duree)
{
   OnFwdReg(OUT_AB, speed_movement,OUT_REGMODE_SYNC);
   Wait(duree);
   Off(OUT_AB);
}

// fait tourner le robot de
void turn(sens s)
{
  if(s==gauche)
  {
    OnRev(OUT_A, speed_movement_rot);
    OnFwd(OUT_B, speed_movement_rot);
    Wait(duree_rot);
    Off(OUT_A);
    Off(OUT_B);
  }
  else  // if(s==droite)
  {
     OnRev(OUT_B, speed_movement_rot);
     OnFwd(OUT_B, speed_movement_rot);
     Off(OUT_B);
     Off(OUT_A);
  }
}


int detection_ligne_blanche()
{
     int res;
    char lum = SENSOR_4;
         if(lum > light_white)
         {
             res=1;
         }
         else
             res=0;
    return res;
}

/*
void solve_labyrinth()
{
     int right;
     int left;
     int front; //devant
     //initialisation
     right=0;
     left=0;
     front=0;
     SetSensorLight(IN_4);
     
         while (detection_ligne_blanche() == 1)
         {
             avancer(duree_fw);
         }
         front=0; //on ne peut plus avancer
         turn(gauche);
         
             if(detection_ligne_blanche() == 0)
             {
                 left=1;//on peut tourner a gauche
             }
             //else
                 //left=0;
         turn(droite);//on revient en position initial
         turn(droite);
             if(detection_ligne_blanche()==0)
             {
                 right=1;//on peut tourner à droite
             }
             //else
               //  right==0;

         turn(left);//on revient en position initiale

         if(right==1)
         {
             turn(droite);
             solve_labyrinth();
         }
         else if( left==1)
         {
              turn(gauche);
              solve_labyrinth;
         }
         else //if(left==0 && right==0)
         
}
*/

task main()
{
     avancer(duree_fw);
     turn(gauche);
     turn(droite);



}

